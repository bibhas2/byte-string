/*
 * This source file was generated by the Gradle 'init' task
 */
package org.mobiarch;

import org.junit.Test;
import static org.junit.Assert.*;

import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;

public class LibraryTest {
    @Test
    public void testParseInt() {
        testParseInt("100", 100);
        testParseInt("  100", 100);
        testParseInt("100  ", 100);
        testParseInt("  100  ", 100);
        testParseInt("00100", 100);
        testParseInt("-100", -100);
        testParseInt("-00100", -100);
        testParseInt("1", 1);
        testParseInt(" 1", 1);
        testParseInt(" 1 ", 1);
        testParseInt("-1", -1);
        testParseInt(" -1", -1);
        testParseInt("-1 ", -1);
        testParseInt(" -1 ", -1);
        testParseInt("00", 0);
        testParseInt("-00", 0);
        testParseInt("-", 0);
        testParseInt(" - ", 0);
    }

    @Test
    public void testParseIntSequence() {
        int[] expected = {0, 11, 22, 33};

        testParseIntSequence("0 11 22 33", expected);
        testParseIntSequence("0 11 22 33  ", expected);
        testParseIntSequence(" 0 11 22 33", expected);
        testParseIntSequence("0, 11, 22, 33", expected);
    }

    @Test 
    public void testParseDouble() {
        testParseDouble("00.0129", 0.0129);
        testParseDouble(" 00.0129", 0.0129);
        testParseDouble("00.0129 ", 0.0129);
        testParseDouble("  00.0129  ", 0.0129);
        testParseDouble("-00.0129", -0.0129);
        testParseDouble("-23.0129", -23.0129);
        testParseDouble("0129", 129.0);
        testParseDouble("-0129", -129.0);
        testParseDouble("-.0129", -.0129);
        testParseDouble(".0129", .0129);
    }

    @Test
    public void testParseDoubleSequence() {
        double[] expected = {0.0, 11.11, 22.22, 33.33};

        testParseDoubleSequence("0.0 11.11 22.22 33.33", expected);
        testParseDoubleSequence("0.0 11.11 22.22 33.33  ", expected);
        testParseDoubleSequence(" 0.0 11.11 22.22 33.33", expected);
        testParseDoubleSequence("0.0, 11.11, 22.22, 33.33", expected);
    }

    @Test
    public void testTrim() {
        testTrim("Hello", "Hello");
        testTrim("", "");
        testTrim(" a ", "a");
        testTrim("   a", "a");
        testTrim("a   ", "a");
        testTrim(" Hello \t", "Hello");
        testTrim("\t Hello", "Hello");
        testTrim("a", "a");
        testTrim("    ", "");
        testTrim("  ", "");
        testTrim(" ", "");
    }

    public void testParseInt(String str, int expected) {
        var buff = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));

        assertEquals(expected, ByteStr.parseInt(buff));
    }

    public void testParseIntSequence(String str, int[] expected) {
        var buff = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));

        for (var i : expected) {
            assertEquals(i, ByteStr.parseInt(buff));
        }
    }

    public void testParseDoubleSequence(String str, double[] expected) {
        var buff = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));

        for (var d : expected) {
            var d2 = ByteStr.parseDouble(buff);

            assertEquals(d, d2, 0.001);
        }
    }

    public void testParseDouble(String str, double actual) {
        var buff = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));

        assertEquals(ByteStr.parseDouble(buff), actual, 0.0001);
    }
    public void testTrim(String str, String actual) {
        var buff = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));

        buff = ByteStr.trim(buff);

        String result = StandardCharsets.UTF_8.decode(buff).toString();

        assertEquals(result, actual);
    }

    @Test
    public void testLowerCase() {
        testLowerCase("Hello World", "hello world");
        testLowerCase("HELLO WORLD", "hello world");
        testLowerCase("hello world", "hello world");
        testLowerCase("", "");
    }

    public void testLowerCase(String str, String actual) {
        var buff = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));

        ByteStr.toLowerCase(buff);

        String result = StandardCharsets.UTF_8.decode(buff).toString();

        assertEquals(result, actual);
    }

    @Test
    public void testUpperCase() {
        testUpperCase("Hello World", "HELLO WORLD");
        testUpperCase("HELLO WORLD", "HELLO WORLD");
        testUpperCase("", "");
    }

    public void testUpperCase(String str, String actual) {
        var buff = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));

        ByteStr.toUpperCase(buff);

        String result = StandardCharsets.UTF_8.decode(buff).toString();

        assertEquals(result, actual);
    }

    public void testIndexOf(String str, char ch, int fromIndex, int actual) {
        var buff = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));

        int idx = ByteStr.indexOf(buff, (byte) ch, fromIndex);

        assertEquals(idx, actual);
    }

    @Test
    public void testIndexOf() {
        testIndexOf("Hello World", ' ', 0, 5);
        testIndexOf("Hello World", ' ', 5, 5);
        testIndexOf("Hello World", ' ', 6, -1);
        testIndexOf("HelloWorld", ' ', 0, -1);
        testIndexOf("", ' ', 0, -1);
        testIndexOf("HelloWorld", ' ', 100, -1);
    }
}
