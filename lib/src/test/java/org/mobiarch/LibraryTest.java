/*
 * This source file was generated by the Gradle 'init' task
 */
package org.mobiarch;

import org.junit.Test;
import static org.junit.Assert.*;

import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;

public class LibraryTest {
    @Test
    public void testParseInt() {
        testParseInt("100", 100);
        testParseInt("00100", 100);
        testParseInt("-100", -100);
        testParseInt("-00100", -100);
        testParseInt("1", 1);
        testParseInt("-1", -1);
        testParseInt("00", 0);
        testParseInt("-00", 0);
    }
    @Test 
    public void testParseDouble() {
        testParseDouble("00.0129", 0.0129);
        testParseDouble("-00.0129", -0.0129);
        testParseDouble("-23.0129", -23.0129);
        testParseDouble("0129", 129.0);
        testParseDouble("-0129", -129.0);
        testParseDouble("-.0129", -.0129);
        testParseDouble(".0129", .0129);
    }

    @Test
    public void testTrim() {
        testTrim("Hello", "Hello");
        testTrim("", "");
        testTrim(" a ", "a");
        testTrim("   a", "a");
        testTrim("a   ", "a");
        testTrim(" Hello \t", "Hello");
        testTrim("\t Hello", "Hello");
        testTrim("a", "a");
        testTrim("    ", "");
        testTrim("  ", "");
        testTrim(" ", "");
    }

    public void testParseInt(String str, int actual) {
        var buff = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));

        assertEquals(ByteStr.parseInt(buff), actual);
    }

    public void testParseDouble(String str, double actual) {
        var buff = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));

        assertEquals(ByteStr.parseDouble(buff), actual, 0.0001);
    }
    public void testTrim(String str, String actual) {
        var buff = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));

        buff = ByteStr.trim(buff);

        String result = StandardCharsets.UTF_8.decode(buff).toString();

        assertEquals(result, actual);
    }


    @Test
    public void testUpperCase() {
        testUpperCase("Hello World", "HELLO WORLD");
        testUpperCase("HELLO WORLD", "HELLO WORLD");
        testUpperCase("", "");
    }

    public void testUpperCase(String str, String actual) {
        var buff = ByteBuffer.wrap(str.getBytes(StandardCharsets.UTF_8));

        ByteStr.toUpperCase(buff);

        String result = StandardCharsets.UTF_8.decode(buff).toString();

        assertEquals(result, actual);
    }
}
